
<div class="modal fade" id="modalNewStock" tabindex="-1" aria-labelledby="modalNewLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content p-4 modal-stock">
            <div class="modal-header modal-header-center">
                <h5 class="modal-title fw-bold" id="modalNewLabel">Nouveau Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <span class="volume-gros" data-volume="{{produitCategorie.volumeGros}}"></span>
                <span class="presentation-gros" data-presentation="{{produitCategorie.presentationGros}}"></span>
                <span class="unite-gros" data-unite="{{produitCategorie.uniteVenteGros}}"></span>
                
                {{ form_start(form, {'attr': {'id': 'newStock', 'action': path('stocks_create') }}) }}
                    <div class="form-group mb-3">
                        <label for="" class="mb-2">Fournisseur</label>
                        {{ form_widget(form.compte) }}
                    </div> 
                    <div class="form-group mb-3">
                        <label for="" class="mb-2">Quantité</label>
                        {{ form_widget(form.qtt) }}
                        <span class="text-success text-qtt-stock"></span>
                    </div> 
                    {% if produitCategorie.volumeGros > 1 %}
                        <div class="form-group mb-3">
                            <label for="" class="mb-2">Qtt en plus</label>
                            <input type="text" name="qtt-plus-stock" id="qtt-plus-stock" class="form-control form-control-md" autocomplete="off" readonly>
                            <span class="text-success text-qtt-plus"></span>
                        </div>
                    {% endif %}
                    
                    <div class="form-group mb-3">
                        <label for="" class="mb-2">Date de peremption</label>
                        {{ form_widget(form.datePeremption) }}
                    </div>  
                     
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary btn-sm px-5 mt-3" style="width: 100%;">Ajouter stock</button>
                    </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
    <div id="id-produit" data-produit-id="{{idProduit}}"></div>
</div>

{% block javascripts %}
<script src="{{ asset('assets/js/script_utile.js')}}"></script>
<script>

$(document).ready(function() {
  var dateFormat = 'dd/mm/yyyy';
  var dateNow = new Date();
  dateNow.setDate(dateNow.getDate() + 1)

  $('#stock_datePeremption_date').datepicker({
      format: dateFormat,
      todayHighlight: true,
      //daysOfWeekDisabled: '0',
      startDate: dateNow,
      language: 'fr',
      autoclose: true,

  });

});
  
    $(document).ready(function () {
    
       $('#newStock').on('submit', function (e) {
            e.preventDefault();
            let form = $(this);
            var idProduit = $('#id-produit').data('produit-id');
            console.log('id', idProduit);
          
            // Create an FormData object
            let formData = new FormData(form[0]);
          formData.append('isNew', false);
            $.ajax({
                url: form.attr('action'),
                type: form.attr('method'),
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    $('#modalNewStock').modal('hide');
                    var nextLink = $('#sidebar').find('li#stock').find('a');
                    setTimeout(function () {
                        toastr.options = {
                            closeButton: true,
                            progressBar: true,
                            showMethod: 'slideDown',
                            timeOut: 1000
                        };
                        toastr.success('Avec succèss', 'Enregistrement effectuée');

                        // Call listStock function
                        listStock(idProduit);
                        
                        // Refresh the page
                        //table.ajax.reload();

                        //$(".loadBody").css('display', 'none');

                    }, 800);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Gérer l'erreur (par exemple, afficher un message d'erreur)
                    alert('Erreur lors de l\'ajout de stock.');
                }
            });
        });
    });
</script>

<script>
    $(document).ready(function() {
        var qttStock = $('#stock_qtt');
        var volumeGros = $('.volume-gros').data('volume');
        var presentationGros = $('.presentation-gros').data('presentation');
        var uniteVenteGros = $('.unite-gros').data('unite');

        $('#qtt-plus-stock').on('click', function() {
            if(qttStock.val() === "") {
                var message = 'Veuillez d\'abord compléter le champ quantité';
                toastrNotification('error', message);
            } else {
                $(this).removeAttr('readonly');
            }
        })

        $('#stock_qtt').on('input', function() {
            var initialQttStock = parseFloat(qttStock.val());
            // Enregistrer la valeur dans la session (si vous avez une fonction pour cela)
            sessionStorage.setItem('initialQttStock', initialQttStock);
        })

        var typingTimer; // Timer variable
        var doneTypingInterval = 500; // Délai de 500ms

        $('#qtt-plus-stock').on('input', function() {
            clearTimeout(typingTimer); // Effacer le timer précédent
            var inputField = $(this);

            typingTimer = setTimeout(function() {
                // Convertir les valeurs en nombres
                var qttPlusValue = parseFloat(inputField.val());
                var volumeGrosValue = parseFloat(volumeGros);

                // Si le champ de quantité est vide
                if (inputField.val().trim() === "") {
                    // Réinitialiser les affichages et le stock
                    $('.text-qtt-plus').text('');
                    $('.text-qtt-stock').text('');
                    qttStock.val(sessionStorage.getItem('initialQttStock'));
                    return;
                } else {
                    // Vérifier si qttPlusValue est inférieur à volumeGrosValue
                    if (qttPlusValue >= volumeGrosValue) {
                        inputField.css('background-color', '#fc8b8b');
                        inputField.val("");
                        var message = 'La quantité plus ne doit pas être supérieure ou égale au volume de gros' + volumeGrosValue;
                        toastrNotification('error', message);
                    } else {
                        inputField.css('background-color', '#fff');

                        // Calculer qttPlusFinal et arrondir à deux décimales
                        var qttPlusFinal = parseFloat((qttPlusValue / volumeGrosValue));

                        // Obtenir et convertir le stock restant
                        var stockRestantValue = parseFloat(sessionStorage.getItem('initialQttStock')); // Défaut à 0 si la valeur est vide

                        // Ajouter qttPlusFinal au stock restant
                        var stockRestantValueFinale = parseFloat((stockRestantValue + qttPlusFinal));

                        // Mettre à jour les textes
                        var textQttPlus = qttPlusFinal + ' ' + presentationGros + '(' + qttPlusValue + uniteVenteGros + ')';
                        $('.text-qtt-plus').text(textQttPlus);

                        var stockRestantText = stockRestantValue + ' ' + presentationGros + ' et ' + qttPlusValue + ' ' + uniteVenteGros;
                        $('.text-qtt-stock').text(stockRestantText);

                        qttStock.val(stockRestantValueFinale);
                    }
                }

                
            }, doneTypingInterval); // Délai d'attente avant d'exécuter la fonction
        });

        // Optionnel : Vous pouvez également gérer le cas où l'utilisateur efface le champ
        $('#qtt-plus-stock').on('keydown', function() {
            clearTimeout(typingTimer); // Effacez le timer si l'utilisateur commence à taper
        });

        // Fonction Toastr notification pour éviter les répétitions de code
        function toastrNotification(type, message) {
            setTimeout(function () {
                toastr.options = {
                    closeButton: true,
                    progressBar: true,
                    showMethod: 'slideDown',
                    timeOut: 2000
                };
                toastr[type](message);
            }, 800);
        }
        
    })
</script>

<script>
       $(document).ready(function() {
        const $chosenResults = $('#stock_compte_chosen .chosen-results');
        const $chosenDrop = $('#stock_compte_chosen .chosen-drop');
        const $selectElement = $('#stock_compte'); // Corrigé l'élément $selectElement pour qu'il pointe vers le bon select

        $('#stock_compte_chosen .chosen-drop .chosen-search input').on('input', function() {
            const inputValue = $(this).val().trim().toLowerCase();
            let matchFound = false;

            // Parcourir les options existantes pour vérifier s'il existe une correspondance partielle
            $selectElement.find('option').each(function() {
                const optionText = $(this).text().trim().toLowerCase();
                if (optionText.startsWith(inputValue)) {
                    matchFound = true;
                    return false; // Si une correspondance est trouvée, on arrête la boucle
                }
            });

            // Si l'input est vide, réinitialisez le résultat et supprimez le bouton "Créer"
            if (inputValue === '') {
                $chosenDrop.find('.btn-create-compte').remove(); // Supprimez le bouton "Créer"
            } else {
                // Si aucune correspondance n'a été trouvée, affichez le bouton "Créer"
                if (!matchFound && !$chosenDrop.find('.btn-create-compte').length) {
                    $chosenDrop.append(`<a href="#" id="btn-create-compte" class="btn-create-compte text-decoration-underline" style="margin-left:100px;">Créer</a>`);
                } 
                // Si une correspondance est trouvée, supprimez le bouton "Créer"
                else if (matchFound) {
                    $chosenDrop.find('.btn-create-compte').remove();
                }
            }

            // Gérer le clic sur le bouton "Créer"
            $(document).off('click', '#btn-create-compte').on('click', '#btn-create-compte', function(e) {
                e.preventDefault(); // Empêche le comportement par défaut du lien
                
                const inputValue = $('#stock_compte_chosen .chosen-drop .chosen-search input').val().trim();
                
                // Ajouter une nouvelle option à l'élément <select> si la valeur n'est pas vide
                if (inputValue !== '') {
                    // Envoyer une requête AJAX pour créer le type
                    $.ajax({
                        url: 'admin/stock/add/compte',
                        type: 'POST',
                        data: { nom: inputValue },
                        success: function(response) {
                            const typeId = response.id; // Récupérer l'ID du type créé
                            
                            if (typeId) {
                                // Ajouter une nouvelle option à l'élément <select>
                                $selectElement.append(`<option value="${typeId}" selected>${inputValue}</option>`);
                                
                                // Mettre à jour Chosen pour refléter les modifications
                                $selectElement.trigger("chosen:updated");

                                // Mettre à jour l'affichage de l'option choisie
                                $('#stock_compte_chosen .chosen-single span').text(inputValue);

                                // Réinitialiser l'input et retirer les éléments non nécessaires
                                $('#stock_compte_chosen .chosen-drop .chosen-search input').val('');
                                $chosenResults.find('.no-results').remove(); // Retirer le message "No results match"
                                $chosenDrop.find('.btn-create-compte').remove(); // Supprimer le bouton "Créer"
                            }
                        },
                        error: function() {
                            alert('Erreur lors de l\'ajout du fournisseur.');
                        }
                    });
                }
            });
        });
    });

</script>
{% endblock %}