# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    AVATAR_BASEPATH: '/uploads/avatar' 
    app.path.product_image: /uploads/product
    app.path.application_logo: /uploads/logo
    app.locales: fr
services:
    App\Twig\FileExistsExtension:
        tags: ['twig.extension']
    #log produit
    App\Service\ProduitCategorieService:
        arguments:
            $productLogger: '@logger.product'
            $security: '@security.helper'
    logger.product:
        class: Psr\Log\LoggerInterface
        factory: ['@monolog.logger', 'product']

    #log affaire
    App\Service\AffaireService:
        arguments:
            $affaireLogger: '@logger.affaire'
            $security: '@security.helper'
    logger.affaire:
        class: Psr\Log\LoggerInterface
        factory: ['@monolog.logger', 'affaire']

    App\Service\TCPDFService:
        public: true
        alias: TCPDF
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    App.AuthorizationManager:
        class: App\Service\AuthorizationManager
        public: true

    App\Service\AuthorizationExtension:
        arguments: ['@security.token_storage']
        public: false
        tags:
            - { name: twig.extension }
    App\Service\AccesService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage']
        public: true 
    App\Service\CategoryPermissionService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    App\Service\PermissionService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    App\Service\PrivilegeService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    App\Service\UserService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    App\Service\ApplicationService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    App\Service\CompteService:
        arguments: ['@App.AuthorizationManager', '@security.token_storage', '@doctrine.orm.entity_manager']
        public: true
    session_interface:
        alias: Symfony\Component\HttpFoundation\Session\SessionInterface
    App\EventListener\RequestListener:
        arguments: 
           $em: '@doctrine.orm.entity_manager'  # Exemple pour l'EntityManager
           $tokenStorage: '@security.token_storage'
           $router: '@router'
           $dispatcher: '@event_dispatcher'
           #$security: '@security.authorization_checker'
           #$session: '@session'
        tags:
          - { name: kernel.event_subscriber, event: kernel.request, method: onKernelRequest }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
